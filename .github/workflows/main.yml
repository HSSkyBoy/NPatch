name: Build Adnroid CI

on:
  workflow_dispatch:

jobs:
  build:
    name: Build on Ubuntu
    runs-on: ubuntu-latest

    env:
      CCACHE_COMPILERCHECK: '%compiler% -dumpmachine; %compiler% -dumpversion'
      CCACHE_NOHASHDIR: 'true'
      CCACHE_HARDLINK: 'true'
      CCACHE_BASEDIR: '${{ github.workspace }}'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: 'false'

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'zulu'

    - name: Cache Gradle packages
      uses: gradle/gradle-build-action@v3
      with:
        gradle-home-cache-cleanup: true

    - name: Set up ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        max-size: 2G
        key: ccache-${{ runner.os }}-${{ github.sha }}
        restore-keys: |
          ccache-${{ runner.os }}-
        save: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}

    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: maven-${{ runner.os }}-${{ hashFiles('libxposed/api/**', 'libxposed/service/**') }}
        restore-keys: |
          maven-${{ runner.os }}-

    - name: Configure release signing key
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: |
        if [ -n "${{ secrets.KEY_STORE }}" ]; then
          echo "正在配置签名属性..."
          cat << EOF >> gradle.properties
          androidStorePassword=${{ secrets.KEY_STORE_PASSWORD }}
          androidKeyAlias=${{ secrets.ALIAS }}
          androidKeyPassword=${{ secrets.KEY_PASSWORD }}
          androidStoreFile=key.jks
          EOF
          echo ${{ secrets.KEY_STORE }} | base64 --decode > key.jks
          echo "签名密钥配置完成。"
        else
          echo "签名密钥未配置，跳过签名步骤。"
        fi
      shell: bash

    - name: Build project with Gradle
      run: |
        cat << EOF >> gradle.properties
        org.gradle.parallel=true
        org.gradle.jvmargs=-Xmx2048m
        android.native.buildOutput=verbose
        EOF

        echo "正在构建 libxposed API..."
        (cd libxposed/api && ./gradlew :api:publishApiPublicationToMavenLocal)

        echo "正在构建 libxposed service..."
        (cd libxposed/service && ./gradlew :interface:publishInterfacePublicationToMavenLocal)

        echo "正在构建 NPatch..."
        ./gradlew buildAll
      shell: bash

    - name: Upload Debug artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lspatch-debug
        path: out/debug/*

    - name: Upload Release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lspatch-release
        path: out/release/*

    - name: Upload ProGuard mappings
      uses: actions/upload-artifact@v4
      with:
        name: mappings
        path: |
          patch-loader/build/outputs/mapping
          manager/build/outputs/mapping

    - name: Upload native symbols
      uses: actions/upload-artifact@v4
      with:
        name: symbols
        path: patch-loader/build/symbols

    - name: Post artifacts to Telegram
      if: success() && github.event_name == 'push' && github.ref == 'refs/heads/master'
      env:
        CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      run: |
        if [ -n "${{ secrets.BOT_TOKEN }}" ]; then
          jarRelease=$(find out/release -name "*.jar")
          managerRelease=$(find out/release -name "*.apk")
          jarDebug=$(find out/debug -name "*.jar")
          managerDebug=$(find out/debug -name "*.apk")

          CAPTION=$(echo "$COMMIT_MESSAGE" | head -n 1)
          
          echo "正在上传产物到 Telegram..."
          
          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMediaGroup" \
            -F chat_id="${CHANNEL_ID}" \
            -F media='[
                {"type": "document", "media": "attach://jarRelease"},
                {"type": "document", "media": "attach://managerRelease"},
                {"type": "document", "media": "attach://jarDebug"},
                {"type": "document", "media": "attach://managerDebug", "caption": "'"${CAPTION}"'"}
              ]' \
            -F jarRelease="@${jarRelease}" \
            -F managerRelease="@${managerRelease}" \
            -F jarDebug="@${jarDebug}" \
            -F managerDebug="@${managerDebug}"
        else
          echo "BOT_TOKEN 未配置，跳过发送到 Telegram。"
        fi
      shell: bash
